# **************************************************************************************************************
#
# Copyright 2020-2023 Robert Bosch GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# **************************************************************************************************************
#
# ========== Release Items for component 'JsonPreprocessor' ==========
#
# Basically this component is stand-alone, but can also be used as part of an automation framework called
# RobotFramework AIO. More information about this framework you can find here:
# 
# https://github.com/test-fullautomation/RobotFramework_AIO
# 
# This JSON file contains component specific release information for the RobotFramework AIO.
# In case you use the component stand-alone only, you can ignore this file.
# 
# --------------------------------------------------------------------------------------------------------------
#
# Format: extended JSON format with the possibility to comment out lines (by '#' at the beginning of the line).
# The reference for relative paths is the position of this file.
#
# --------------------------------------------------------------------------------------------------------------

{

# Section "COMPONENT":
# --------------------

   "COMPONENT" : "JsonPreprocessor",


# Section "RELEASES" for RobotFramework_AIO:
# ------------------------------------------

   "RELEASES"  : {
                   "0.10." : [
"
* Added a ``jsonDump`` method to write the content of a Python dictionary to a file in JSON format

  **Example:**

  | ``dictTest = {\"A\"  1, \"B\"  2}``
  | ``json_preprocessor = CJsonPreprocessor()``
  | ``json_preprocessor.jsonDump(dictTest, \"./OutputFile.json\")``

* Added ``getVersion`` and ``getVersionDate`` methods to get current version and the date of the version.
* Improved format of nested parameters; improved error messages
* Some bugs fixed in implicitly created data structures
* Improved index handling together with nested parameters
* Self test extended by further test cases

  All **JsonPreprocessor** test cases: `JPP_TestUsecases.html <https://htmlpreview.github.io/?https://github.com/test-fullautomation/python-jsonpreprocessor/blob/develop/test/JPP_TestUsecases.html>`_
"
                             ]
                 ,
                  "0.11." : [
"
* Optimized regular expression patterns.
* Added mechanism to prevent Python application freeze.
* Removed globals scope out of all exec method executions.
* Optimized errors handling while loading parameters.
* Improved handling of duplicated parameters:

  In following example different values are assigned to the same parameter several times. It can be seen that 
  the last assignment is the valid one. Previously assigned values will be overwritten. Please make sure to add
  the full scope in case you refer to a dictionary key inside this dictionary:

  | ``\u007b``
  |    ``\"params\" : \u007b``
  |         ``\"global\" : \u007b``
  |              ``\"var1\" : 1,``
  |              ``\"var2\" : 2,``
  |              ``\"var1\" : $\u007bparams.global.var2\u007d,``
  |              ``\"var2\" : 3``
  |         ``\u007d``
  |    ``\u007d``
  | ``\u007d``

  Finally, the value of ``var1`` is 2 and the value of ``var2`` is 3.

* Self test extended by further test cases.

  Overview about **JsonPreprocessor** test cases: `JPP_TestUsecases.html <https://htmlpreview.github.io/?https://github.com/test-fullautomation/python-jsonpreprocessor/blob/develop/test/JPP_TestUsecases.html>`_

* Extended debugging support:

  In case of JSON syntax errors, the **JsonPreprocessor** exception contains an extract of the JSON content nearby the position, where the error occurred.
  Line breaks in JSON content are replaced by '``\\n``'.

  | ``'Expecting ',' delimiter: line 3 column 4 (char 43)``
  | ``Nearby: '... \u007b\\n   \"dict_param\" : \u007b\"A\" : 1 , \"B\" : 2\u007d\\n   \"list_param\" : [\"A\", ...'``

"
                            ]
                 ,
                  "0.12." : [
"
* Changed data type of return value

  **JsonPreprocessor** now returns a ``dotdict`` (instead of a standard Python dictionary). With the ``dotdict`` notation, dictionary keys can be accessed as attributes.
  The resulting code is shorter and therefore easier to read.

* Blocked dynamic key names

  In opposite to previous versions of the **JsonPreprocessor**, the creation of new keys based on parameter (dynamic key names), **is not supported an more**!

  Example:

  | ``\u007b``
  |    ``\"param1\" : \"ABC\",``
  |    ``\"param2\" : \"XYZ\",``
  |    ``\"$\u007bparam2\u007d\" : 1``
  | ``\u007d``

  This code previously created a new parameter ``\"XYZ\"`` with value ``1``. Now an error message will be raised.
  
* Improved error messages
"
                            ]
                }
}
