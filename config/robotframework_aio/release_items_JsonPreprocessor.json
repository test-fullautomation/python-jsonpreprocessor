# **************************************************************************************************************
#
# Copyright 2020-2023 Robert Bosch GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# **************************************************************************************************************
#
# ========== Release Items for component 'JsonPreprocessor' ==========
#
# Basically this component is stand-alone, but can also be used as part of an automation framework called
# RobotFramework AIO. More information about this framework you can find here:
# 
# https://github.com/test-fullautomation/RobotFramework_AIO
# 
# This JSON file contains component specific release information for the RobotFramework AIO.
# In case you use the component stand-alone only, you can ignore this file.
# 
# --------------------------------------------------------------------------------------------------------------
#
# Format: extended JSON format with the possibility to comment out lines (by '#' at the beginning of the line).
# The reference for relative paths is the position of this file.
#
# --------------------------------------------------------------------------------------------------------------

{

# Section "COMPONENT":
# --------------------

   "COMPONENT" : "JsonPreprocessor",


# Section "RELEASES" for RobotFramework_AIO:
# ------------------------------------------

   "RELEASES"  : {
                   "0.10." : [
"
* Added a ``jsonDump`` method to write the content of a Python dictionary to a file in JSON format

  **Example:**

  | ``dictTest = {\"A\"  1, \"B\"  2}``
  | ``json_preprocessor = CJsonPreprocessor()``
  | ``json_preprocessor.jsonDump(dictTest, \"./OutputFile.json\")``

* Added ``getVersion`` and ``getVersionDate`` methods to get current version and the date of the version.
* Improved format of nested parameters; improved error messages
* Some bugs fixed in implicitly created data structures
* Improved index handling together with nested parameters
* Self test extended by further test cases

  All JsonPreprocessor test cases: `JPP_TestUsecases.html <https://htmlpreview.github.io/?https://github.com/test-fullautomation/python-jsonpreprocessor/blob/develop/test/JPP_TestUsecases.html>`_
"
                             ]
                 },
                 {
                  "0.11." : [
"
* Optimized regular expression patterns.
* Added mechanism to prevent Python application freeze.
* Removed globals scope out of all exec method executions.
* Optimized errors handling while loading parameters.
* Improved duplicated parameters handling

**Example:**

The content of the configuration file:
{
  ...
  \"params\" : {
        \"global\" : {
          \"var1\"              : 1,
          \"var2\"              : 2,
          \"var11\"             : ${params.global.var1},
          \"var21\"             : ${params.global.var2},
          \"var1\"              : 10,
          ${params.global.var2} : 20,
          \"var12\"               : ${params.global.var1},
          \"var22\"               : ${params.global.var2}
        }
  }
  ...
}
The values of these variables are:
  oJson['params']['global']['var1']  = 10
  oJson['params']['global']['var2']  = 20
  oJson['params']['global']['var11'] = 1
  oJson['params']['global']['var21'] = 2
  oJson['params']['global']['var12'] = 10
  oJson['params']['global']['var22'] = 20

* Self test extended by further test cases

  All JsonPreprocessor test cases: `JPP_TestUsecases.html <https://htmlpreview.github.io/?https://github.com/test-fullautomation/python-jsonpreprocessor/blob/develop/test/JPP_TestUsecases.html>`_
"
                            ]
                }
}
