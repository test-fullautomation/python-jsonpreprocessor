@startuml

skinparam class {
    BackgroundColor PaleGreen
    BorderColor DarkSlateGray
}

package PythonExtensionsCollection {
    package String {
        class CString
    }
}

enum CSyntaxType {
    python
    json
}

enum CNameMangling {
    AVOIDDATATYPE
    COLONS
    DUPLICATEDKEY_00
    DUPLICATEDKEY_01
    DUPLICATEDKEY_02
    STRINGCONVERT
    LISTINDEX
}

class CPythonJSONDecoder {
    - NUMBER_RE: re
    + __init__(*args, **kwargs)
    - _custom_scan_once(string: str, idx: int): any
    + custom_scan_once(string: str, idx: int): any
}

class CJsonPreprocessor {
    - lDataTypes: list
    - jsonPath: str
    - lImportedFiles: list
    - recursive_level: int
    - syntax: CSyntaxType
    - currentCfg: dict
    - dUpdatedParams: dict
    - lNestedParams: list
    - lDotInParamName: list
    + __init__(syntax: CSyntaxType = CSyntaxType.python, currentCfg: dict = {}) : None
    - __reset() : None
    - __processImportFiles(input_data: dict) : dict
    - __load_and_removeComments(jsonFile: str) : str
    - __checkParamName(self, sInput: str) -> str
    - __nestedParamHandler(self, sInputStr : str, bKey = False) -> list
    - __handleDotdictFormat(self, lInputListParams : list, lParams: list = []) -> list
    - __checkAndCreateNewElement(self, sKey: str, value)
    - __updateAndReplaceNestedParam(self, oJson : dict, bNested : bool = False, recursive : bool = False)
    - __checkAndUpdateKeyValue(self, sInputStr: str, nestedKey = False) -> str
    - __checkDotInParamName(self, oJson : dict)
    + jsonLoad(self, jFile : str, masterFile : bool = True)
    + jsonDump(self, oJson : dict, outFile : str) -> str

}

CString --> CJsonPreprocessor
CSyntaxType --> CJsonPreprocessor
CNameMangling --> CJsonPreprocessor
CPythonJSONDecoder --> CJsonPreprocessor

@enduml